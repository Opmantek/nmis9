#
#  Copyright Opmantek Limited (www.opmantek.com)
#
#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM
#
#  This file is part of Network Management Information System ("NMIS").
#
#  NMIS is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  NMIS is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with NMIS (most likely in a file named LICENSE).
#  If not, see <http://www.gnu.org/licenses/>
#
#  For further information on NMIS or for a license other than GPL please see
#  www.opmantek.com or email contact@opmantek.com
#
#  User group details:
#  http://support.opmantek.com/users/
#
# *****************************************************************************

use Compat::NMIS;
use NMISNG::Auth;
use Compat::UUID;
use NMISNG::Util;

my $C = NMISNG::Util::loadConfTable();
# variables used for the security mods
my $AU = NMISNG::Auth->new(conf => $C);

# Calling program needs to do auth, then set the ENVIRONMENT before this is called.
$AU->SetUser($ENV{'NMIS_USER'});

my @groups = ();
my $GT = Compat::NMIS::loadGroupTable();
foreach (sort split(',',$C->{group_list})) { push @groups, $_ if $AU->InGroup($_); }

my @pollingpolicies = ("default", sort keys %{ Compat::NMIS::loadGenericTable("Polling-Policy") || {}});

my @nodes = ();
my $LNT = Compat::NMIS::loadLocalNodeTable(); # load from file or db
foreach (sort {lc($a) cmp lc($b)} keys %{$LNT}) { push @nodes, $_ if $AU->InGroup($LNT->{$_}{group}); }

my @models = ();
if ( opendir(MDL,$C->{'<nmis_models>'}) ) {
	@models = ('automatic',sort {uc($a) cmp uc($b)} (grep(s/^Model-(.*)\.nmis$/$1/,readdir MDL)));
} else {
	print Tr(td({class=>'error'},"Error on loading models names from directory $C->{'<nmis_models>'}"));
}
closedir(MDL);

my $uuid = Compat::UUID::getUUID();

%hash = (
	Nodes =>
	[
	 { name => { mandatory => 'true', header => 'Name',display => 'key,header,text',value => [""] }},
	 { new_name => { header => 'New Name', display => 'text,editonly', value => [""] }},

	 { uuid => { header => 'UUID',display => 'header,readonly',value => ["$uuid"] }},

	 { host => { mandatory => 'true', header => 'Host Name/IP Address',display => 'header,text',value => [""] }},
	 { group => { mandatory => 'true', header => 'Group',display => 'header,popup',value => [ @groups] }},
	 { community => { mandatory => 'true', header => 'SNMP Community',display => 'text',value => ["$C->{default_communityRO}"] }},

	 { wmi => { special=>'separator', header => "WMI Options", } },
	 { wmiusername => { header => "WMI Username", display => 'text', value => [''] }},
	 { wmipassword => { header => "WMI Password", display => 'text', value => [''] }},

	 { service_management => { special => 'separator', header => 'Service Management Options',display => 'readonly',value => [""] }},
	 { customer => { header => 'Customer',display => 'header,popup',value => [ sort keys %{Compat::NMIS::loadGenericTable('Customers')}] }},
	 { businessService => { header => 'Business Service',display => 'header,scrolling',value => [ sort keys %{Compat::NMIS::loadGenericTable('BusinessServices')} ] }},
	 { serviceStatus => { header => 'Service Status',display => 'popup',value => [ sort keys %{Compat::NMIS::loadGenericTable('ServiceStatus')} ] }},
	 { extra_options => { special => 'separator', header => 'Remote Connection'}},
	 { remote_connection_name => { header => 'Remote Connection Name',display => 'text',value => ["SSH to Node"] }},
	 { remote_connection_url => { header => 'Remote Connection URL',display => 'text',value => ["ssh://\$host"] }},
	 { extra_options => { special => 'separator', header => 'Extra Options'}},
	 { display_name => { header => "Display Name", display => "header,text", value => [""] }},
	 { notes => { header => 'Notes',display => 'header,textbox',value => [""] }},
	 { roleType => { header => 'Role Type', display => 'popup',value => [ split(/\s*,\s*/, $C->{roletype_list}) ] }},
	 { netType => { header => 'Net Type', display => 'popup',value => [ split(/\s*,\s*/, $C->{nettype_list}) ] }},
	 { location => { header => 'Location',display => 'header,popup',value => [ sort keys %{Compat::NMIS::loadGenericTable('Locations')}] }},
	 { advanced_options => { special => 'separator', header => 'Advanced Options'}},
	 { polling_policy => { header => "Polling Policy", display => 'header,popup', value => [@pollingpolicies]}},
	 { model => { header => 'Model',display => 'popup',value => [@models] }},
	 { active => { header => 'Active',display => 'header,popup',value => ["true", "false"] }},
	 { ping => { header => 'Ping', display => 'header,popup',value => ["true", "false"] }},
	 { collect => { header => 'Collect',display => 'header,popup',value => ["true", "false"] }},
	 { cbqos => { header => 'CBQoS',display => 'popup',value => ["none", "input", "output", "both"] }},
	 { calls=> {  header => 'Modem Calls', display => 'popup',value => ["false", "true"] }},
	 { threshold => { header => 'Threshold', display => 'popup',value => ["true", "false"] }},
	 { webserver => { header => 'Web Server', display => 'popup',value => ["false", "true"] }},
	 { depend =>{ header => 'Depend', display => 'header,scrolling',value => [ "N/A", @nodes ] }},
	 { services => { header => 'Services', display => 'header,scrolling',value => ["", sort keys %{Compat::NMIS::loadServicesTable()}] }},
	 { timezone => { header => 'Time Zone',display => 'text',value => ["0"] }},
	 { extra_options => { special => 'separator', header => 'SNMP Settings'}},
	 { version => { header => 'SNMP Version',display => 'popup',value => ["snmpv2c","snmpv1","snmpv3"] }},
	 { max_msg_size => { header => "SNMP Max Message Size", display => 'text', value => ["$C->{snmp_max_msg_size}"] }},
	 { max_repetitions => { header => "SNMP Max Repetitions", display => "text", value => ["0"] }},
	 { port => { header => 'SNMP Port', display => 'text',value => ["161"] }},
	 { username => { header => 'SNMP Username',display => 'text',value => ["$C->{default_username}"] }},
	 { context => { header => 'SNMP Context',display => 'text',value => [""] }},
	 { authpassword => { header => 'SNMP Auth Password',display => 'text',value => ["$C->{default_authpassword}"] }},
	 { authkey => { header => 'SNMP Auth Key',display => 'text',value => ["$C->{default_authkey}"] }},
	 { authprotocol => { header => 'SNMP Auth Proto',display => 'popup',value => ['md5','sha'] }},
	 { privpassword => { header => 'SNMP Priv Password',display => 'text',value => ["$C->{default_privpassword}"] }},
	 { privkey => { header => 'SNMP Priv Key',display => 'text',value => ["$C->{default_privkey}"] }},
	 { privprotocol => { header => 'SNMP Priv Proto',display => 'popup',value => ['des','aes','3des'] }},
	]
		);
