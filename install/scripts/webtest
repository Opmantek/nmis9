#!/usr/bin/perl
# a small helper script for testing web sites end-to-end
# args: url
# -c expected content (regex, case-insensitive)
# -s expected status code (regex)
# -N makes the script ignore SSL certificate issues completely
# exits with 100 if ok, 50 if the code is ok but the body is wrong, 0 otherwise
our $VERSION = "1.1.0";

use strict;
use LWP::UserAgent;
use Getopt::Std;
use Time::HiRes;

my %opts;
die "Usage: $0 [-c content-regex] [-s status-regex] [-d debugfile] [-f #redirs] [-N] <url>
-f N: follow up to N redirections
-N: do NOT verify SSL certificates
-d: append debug output to the given file
\n\n"
		if (!getopts("c:s:f:Nd:",\%opts) or @ARGV != 1);

my $okcode = $opts{s}? qr/$opts{s}/ : qr/200/;
my $okbody = $opts{c} &&  qr/$opts{c}/i;
my $redirs = defined $opts{f}? $opts{f} : 0;
my $url = $ARGV[0];

my $dfh;
if ($opts{d})
{
	open($dfh, ">>$opts{d}") or die "cannot write to debug file $opts{d}: $!\n";
	print $dfh "\n".Time::HiRes::time." starting: url $url, okcode $okcode, okbody $okbody, redirs $redirs, ignorecerts $opts{N}\n";
}

# depending on your version of libwww-perl, LWP::Protocol::https may or may not be included
# but for https sites it's required
if ($url =~ m!https!)
{
	eval { require LWP::Protocol::https; };
	if ($@)
	{
		print "Error: Cannot check https service, module LWP::Protocol::https is missing!";
		print $dfh Time::HiRes::time." Error: Cannot check https service, module LWP::Protocol::https is missing!\n" if ($dfh);
		exit 0;
	}
}

my @ua_args;
push @ua_args,
		(ssl_opts => { verify_hostname => 0, SSL_verify_mode => 0 }) if ($opts{N});
my $ua = LWP::UserAgent->new(@ua_args);
# mostly we want to receive the redirect, not follow it
$ua->max_redirect($redirs);
$ua->env_proxy(0);							# no proxying for end-to-end testing

my $exitcode = 0;
my $statusmsg = "Unknown Failure";

$url = "http://$url" if ($url !~ m!^([a-z]+)://!);

my @starttime = Time::HiRes::gettimeofday;
print $dfh Time::HiRes::time." issuing GET\n" if ($dfh);
my $res = $ua->get($url);
my $responsetime = Time::HiRes::tv_interval(\@starttime);
print $dfh Time::HiRes::time." done with GET, response status ".$res->status_line."\n" if ($dfh);
if ($res->code =~ $okcode)
{
	print $dfh Time::HiRes::time." status code matches okcode\n" if ($dfh);
	$exitcode = 100;
	$statusmsg = "Page OK";

	if ($okbody && $res->decoded_content !~ $okbody)
	{
		print $dfh Time::HiRes::time." code does NOT match okbody\n" if ($dfh);
		$exitcode = 50;
		$statusmsg = "Page downloaded OK but content invalid!";
	}
}
else
{
	print $dfh Time::HiRes::time." status code bad\n" if ($dfh);
	$statusmsg .= ", response was '".$res->status_line."'";
}

if ($dfh)
{
	print $dfh Time::HiRes::time." done, will exit with $exitcode, response time $responsetime\n";
	close $dfh;
}

print "$statusmsg\nresponsetime=$responsetime\n";
# 100 is ok, 0 is 'service is down'
exit $exitcode;
