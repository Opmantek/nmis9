# Screen 1, create a name and select a GE Node this belongs to
# Screen 2, select the node and load the circuits, and let the user select the circuits

use Compat::NMIS;
use NMISNG::Auth;

my $q = new CGI; # This processes all parameters passed via GET and POST
my $Q = $q->Vars; # values in hash

my $C = loadConfTable();
# variables used for the security mods
my $AU = NMISNG::Auth->new(conf => $C); 

# Calling program needs to do auth, then set the ENVIRONMENT before this is called.
$AU->SetUser($ENV{'NMIS_USER'});

my @geNodes = ();
my @nodes = ();
my @circuits = ();

my $NS = Compat::NMIS::loadNodeSummary();
my $LNT = Compat::NMIS::loadLocalNodeTable(); # load from file or db

foreach (sort {lc($a) cmp lc($b)} keys %{$LNT}) { 
	if ($AU->InGroup($LNT->{$_}{group})) {
		push(@nodes,$_);
		push(@geNodes,$_) if $NS->{$_}{nodeModel} =~ /GE-QS941|CiscoRouter/; 
	}
}

# If the CGI has a key value, then we can load more details and complete the circuits
if ( $Q->{key} ne "" ) {
	my $key = $Q->{key};
	my $CG = loadTable(dir=>'conf',name=>'CircuitGroups');
	#print STDERR "key=$key geNode=$CG->{$key}{geNode}\n";

	my $S = NMISNG::Sys->new;
	$S->init(name=>$CG->{$key}{geNode},snmp=>'false');
	my $catchall = $S->inventory( concept => 'catchall' )->data; # ro clone is good enough
	if ( exists $catchall->{cps6000Cct} ) {
		foreach (sort {$catchall->{cps6000Cct}{$a}{cpsCctEntryIde} cmp $catchall->{cps6000Cct}{$b}{cpsCctEntryIde}} keys %{$catchall->{cps6000Cct}}) { 
			push(@circuits,$catchall->{cps6000Cct}{$_}{cpsCctEntryIde});
		}
	}
}

%hash = (
			CircuitGroups => [
				{ circuitGroup => { header => 'Circuit Group',display => 'key,header,text', value => [""] }},
				{ dslamNode => { header => 'DSLAM Node', display => 'text,header', value => [ "" ] }},
				{ geNode => { header => 'GE Node', display => 'popup,header', value => [ "N/A", @geNodes ] }},
				{ circuits => { header => 'Circuits', display => 'scrolling,header', value => [ "N/A", @circuits ] }},
				{ groupId => { header => 'Group ID', display => 'text,header', value => [""] }},
				{ shelf => { header => 'Shelf', display => 'text,header', value => [""] }},
				{ cable => { header => 'Cable', display => 'text,header', value => [""] }},
				{ cuenta => { header => 'Cuenta', display => 'text,header', value => [""] }},
				{ direccion => { header => 'Direccion', display => 'text,header', value => [""] }},
			]
);

