#!/usr/bin/perl
#
#  Copyright 1999-2014 Opmantek Limited (www.opmantek.com)
#
#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM
#
#  This file is part of Network Management Information System ("NMIS").
#
#  NMIS is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  NMIS is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with NMIS (most likely in a file named LICENSE).
#  If not, see <http://www.gnu.org/licenses/>
#
#  For further information on NMIS or for a license other than GPL please see
#  www.opmantek.com or email contact@opmantek.com
#
#  User group details:
#  http://support.opmantek.com/users/
#
# *****************************************************************************
use strict;
our $VERSION = "9.0.0b";

use FindBin;
use lib "$FindBin::Bin/../lib";

use POSIX qw();
use File::Basename;
use File::Spec;
use File::Find;
use Data::Dumper;
use Time::Local;								# report stuff - fixme needs rework!
use Time::HiRes;

# this imports the LOCK_ *constants (eg. LOCK_UN, LOCK_EX), also the stat modes
use Fcntl qw(:DEFAULT :flock :mode);
use Errno qw(EAGAIN ESRCH EPERM);

use NMISNG;
use NMISNG::Log;
use NMISNG::Util;
use NMISNG::Outage;

use Compat::NMIS;

if ( @ARGV == 1 && $ARGV[0] eq "--version" )
{
	print "version=$VERSION\n";
	exit 0;
}

my $thisprogram = basename($0);
my $usage       = "Usage: $thisprogram [option=value...] <act=command>

 act=fixperms
 act=config-backup
 act=groupsync
 act=noderefresh

 act=schedule [at=time] <job.type=activity> [job.priority=0..1] [job.X=....]
  act=schedule-help for more detailed help
 act=list-schedules [verbose=t/f] [only=active|queued]
 act=delete-schedule id=<schedule_id>
 act=abort id=<schedule_id>

 act=purge [simulate=t/f] [info=t/f]
 act=dbcleanup [simulate=t/f] [info=t/f]

 act=run-reports period=<day|week|month> type=<all|times|health|top10|outage|response|avail|port>

 act=list-outages [filter=X...]
 act=create-oudate [outage.A=B... outage.X.Y=Z...]
 act=update-outage id=<outid> [outage.A=B... outage.X.Y=Z...]
 act={delete-outage|show-outage} id=<outid>
 act=check-outages [node=X|uuid=Y] [time=T]
  act=outage-help for more detailed help

\n";


my $scheduleusage = qq|Job Scheduling:

list-schedules: displays overview of pending and active jobs;
  verbose=t causes job arguments to be displayed fully.
  only=queued shows pending jobs only,
  only=active shows only jobs that are in progress.

delete-schedule: removes a schedule record from the database
abort: like delete-schedule but also terminates any worker process that is
  processing that job.

create-schedule: inserts a new job record into the database.

Supported Arguments for Schedule Creation:

at: optional time argument for the job to commence, default is now.

job.type: job type, required, one of: collect update services
  thresholds escalations metrics configbackup purge dbcleanup
  selftest permission_test or plugins

job.priority: optional number between 0 (lowest) and 1 (highest) job priority.
 default is 1 for manually scheduled jobs

For collect/update/services:
job.node: node name
job.uuid: node uuid
job.group: group name
  All three are optional and can be repeated. If none are given,
  all active nodes are chosen.

For collect:
job.wantsnmp, job.wantwmi: optional, default is 1.

For plugins:
job.phase: required, one of update or collect
job.uuid: required, one or more node uuids to operate on

job.force: optional, if set to 1 certain job types ignore scheduling policies
 and bypass any cached data.
|;


my $outageusage = qq|Outage Management:

list-outages: shows overview of selected outage schedules
show-outage: displays the details for one outage instance

create-outage: creates new outage schedule
update-oudate: updates existing outage schedule
 only the given outage.A, outage.X.Y properties are changed.

check-outage: reports which outages would apply at the given time
 (or now) and  for one node (if given) or all nodes

Supported Arguments for Outage Creation:

outage.description: free-form textual description.
outage.change_id: change management ticket identifier, used for event tagging

outage.frequency: one of 'once', 'daily', 'weekly' or 'monthly'
outage.start, outage.end: date and time of outage start and end,
 format depends on frequency
  daily: "HH:MM" or "HH:MM:SS". 24:00 is allowed for end.
  weekly: "MDAY HH:MM" or "MDAY HH:MM:SS", MDAY one of 'Mon', 'Tue' etc.
  monthly: "D HH:MM:SS", "-D HH:MM:SS", "D HH:MM", "-D HH:MM"
   D is the numeric day of the month, 1..31.  -D counts from the end of the month,
   -1 is the last day of the month, -2 the second to last etc.
  once: ISO8601 date time recommended,
   e.g. 2017-10-31T03:04:26+0000

outage.options: optional key=values to adjust NMIS' behaviour during an outage
outage.selector: any number of criteria for selecting devices for this outage
  selector keys: node.X or config.Y, node config or global config properties
  selector values: single string, /regex string/ or array or single strings.
  arrays must be given as separate indexed entries.
  all selectors must match for a node to be subject to the outage.

example: $thisprogram act=create-outage \\
outage.description='certain nodes are busy each month start' \\
outage.change_id='ticket #42' \\
outage.frequency=monthly outage.start="1 12:00" outage.end="1 13:30" \\
outage.selector.node.group.0="busybodies" \\
outage.selector.node.group.1="alsobad"\n\n|;

die $usage if ( !@ARGV || $ARGV[0] =~ /^-(h|\?|-help)$/ );
my $Q = NMISNG::Util::get_args_multi(@ARGV);

my $wantverbose = (NMISNG::Util::getbool($Q->{verbose}));
my $wantquiet  = NMISNG::Util::getbool($Q->{quiet});

my $customconfdir = $Q->{dir}? $Q->{dir}."/conf" : undef;
my $C      = NMISNG::Util::loadConfTable(dir => $customconfdir,
																				 debug => $Q->{debug},
																				 info => $Q->{info});
die "no config available!\n" if (ref($C) ne "HASH" or !keys %$C);

# the db config needs adjusting before dbcleanup is attempted: the aggregations
# often take longer than the default 5s...and that param cannot be set on live connections.
if ($Q->{act} eq "dbcleanup")
{
	$C->{db_query_timeout} = 1000*300;	# 5 minutes max
}

# log to stderr if debug or info are given
my $logfile = $C->{'<nmis_logs>'} . "/cli.log";
my $error = NMISNG::Util::setFileProtDiag(file => $logfile) if (-f $logfile);
warn "failed to set permissions: $error\n" if ($error);

# use debug, or info arg, or configured log_level
my $logger = NMISNG::Log->new( level => NMISNG::Log::parse_debug_level(
																 debug => $Q->{debug},
																 info => $Q->{info}) // $C->{log_level},
															 path  => (defined($Q->{debug}) || defined($Q->{info})? undef : $logfile));

# this opens a database connection
my $nmisng = NMISNG->new(
	config => $C,
	log    => $logger,
		);

# for audit logging
my ($thislogin) = getpwuid($<); # only first field is of interest

if ($Q->{act} =~ /^schedule[_-]help$/)
{
	print $scheduleusage;
	exit 0;
}
# scheduling of actions, overriding/augmenting what nmisd automatically schedules
elsif ($Q->{act} eq "schedule")
{
	# no args at all? print help
	my $what = $Q->{"job.type"};
	if (!defined $what)
	{
		print $scheduleusage;
		exit 1;
	}
	my $priority = $Q->{"job.priority"} // 1; # default assumption is non-automatic custom job, hence max priority

	# at=time or now
	my $when = $Q->{at}? NMISNG::Util::parseDateTime($Q->{at}) || NMISNG::Util::getUnixTime($Q->{at}) : Time::HiRes::time;
	die "Invalid time specification \"$Q->{at}\"!\n" if (!$when);

	my %jobargs;
	for my $match (grep(/^job\..+$/, keys %$Q))
	{
		next if ($match =~ /^job\.(type|priority)$/); # these don't go into the job args
		my $argument = $match;
		$argument =~ s/^job\.//;
		$jobargs{$argument} = ( $argument eq "force"? # for force we'd like 1/0
														NMISNG::Util::getbool($Q->{$match})?1:0 : $Q->{$match});
	}

	# perform any necessary arg conversions and expansions
	# collect/services/update, find the nodes implied and schedule a separate job for each
	# post-update/collect plugins require a list of node uuids - should normally be left to the daemon to schedule
	if ($what =~ /^(collect|update|services|plugins)$/)
	{
		my @filters;
		for my $filterable (qw(node name group uuid)) # job.node === job.name === node name
		{
			my @inputs = ref($jobargs{$filterable}) eq "ARRAY"? @{$jobargs{$filterable}}: $jobargs{$filterable} // ();
			map { push @filters, { ($filterable eq "node"? "name" : $filterable) => $_ }; } (@inputs);
		}

		my $possibles = $nmisng->expand_node_selection(@filters);
		die "Failed to query nodes: ".$possibles->error."\n" if ($possibles->error);
		die "No nodes found matching your selectors!\n" if (!$possibles->count);

		map { delete $jobargs{$_} } (qw(name node group)); # no longer needed, uuid is what counts
		if ($what eq "collect")
		{
			$jobargs{wantwmi} = $Q->{"job.wantwmi"} // 1;
			$jobargs{wantsnmp} = $Q->{"job.wantsnmp"} // 1;
		}

		if ($what eq "plugins")			# one combined job with the node uuids passed in
		{
			$jobargs{uuid} = [ map { $_->{uuid} } (@{$possibles->data}) ];

			my ($error,$jobid) = $nmisng->update_queue(
				jobdata => {
					type => $what,
					time => $when,
					priority => $priority,
					in_progress => 0,					# somebody else is to work on this
					args => \%jobargs });
			die "Failed to add schedule: $error\n" if ($error);
			print "Job $jobid created for type $what and ".$possibles->count." nodes.\n" if (!$wantquiet);
		}
		# collect/update/services need separate scheduling for each node
		else
		{
			for my $onenode (@{$possibles->data})
			{
				$jobargs{uuid} = $onenode->{uuid};

				my ($error,$jobid) = $nmisng->update_queue(
					jobdata => {
						type => $what,
						time => $when,
						priority => $priority,
						in_progress => 0,					# somebody else is to work on this
						args => \%jobargs });
				die "Failed to add schedule: $error\n" if ($error);
				print "Job $jobid created for node $onenode->{name} ($onenode->{uuid}) and type $what.\n" if (!$wantquiet);
			}
		}
	}
	# none of these take any job arguments
	elsif ($what =~ /^(selftest|permission_test|configbackup|purge|dbcleanup|escalations|metrics|thresholds)$/)
	{
		my ($error,$jobid) = $nmisng->update_queue(
			jobdata => {
				type => $what,
				time => $when,
				priority => $priority,
				in_progress => 0,					# somebody else is to work on this
			});
		die "Failed to add schedule: $error\n" if ($error);
		print "Job $jobid created for type $what.\n" if (!$wantquiet);
	}
	else
	{
		die "Unrecognized job type \"$what\"!\n";
	}

	exit 0;
}
# print in-progess and queued jobs, and automatically scheduled stuff
# shorten the args unless verbose=true
elsif ($Q->{act} =~ /^list[_-]schedules?$/)
{
	my $queued = $nmisng->get_queue_model(sort => { time => 1 });
	if (my $fault = $queued->error)
	{
		die "Failed to search queue: $fault\n";
	}

	my $queuedjobs = $queued->data;
	if (!@$queuedjobs)
	{
		print STDERR "No activities scheduled or in-progress.\n" if (!$wantquiet);
	}
	else
	{
		if (!defined($Q->{only}) or $Q->{only} eq "active")
		{
			my $fmt = "%-26s%-26s%-48s%-20s%s\n";
			printf("Active Jobs:\n$fmt",
						 "Id","When","Status","What",
						 "Parameters");

			my $some;
			for my $active (grep($_->{in_progress}, @$queuedjobs))
			{
				$some = 1;

				my $printable = $active->{args}?
					Data::Dumper->new([$active->{args}])->Terse(1)->Indent(0)->Pair("=")->Dump :  "";
				$printable = "<skipped, too long>"
						if (!$wantverbose && length($printable) > 64);

				printf($fmt,
							 $active->{_id},
							 scalar(localtime($active->{time})),
							 ("In Progress since "
								.localtime($active->{in_progress})
								. ($wantverbose? " (Worker $active->{status}->{pid}) " : "")),
							 $active->{type},
							 $printable);
			}
			print "No active jobs at this time.\n" if (!$some);
			print "\n";
		}

		if (!defined($Q->{only}) or $Q->{only} eq "queued")
		{
			my $fmt = "%-26s%-26s%-12s%-20s%s\n";
			printf("Queued Jobs:\n$fmt",
						 "Id","When","Priority","What","Parameters");

			my $some;
			for my $sched (grep(!$_->{in_progress}, @$queuedjobs))
			{
				$some = 1;
				my $printable = $sched->{args}?
						Data::Dumper->new([$sched->{args}])->Terse(1)->Indent(0)->Pair("=")->Dump :  "";
				$printable = "<skipped, too long>"
						if (!$wantverbose && length($printable) > 64);

				printf($fmt,
							 $sched->{_id},
							 scalar(localtime($sched->{time})),
							 $sched->{priority},
							 $sched->{type},
							 $printable);
			}

			print "No active jobs at this time.\n" if (!$some);
			print "\n";
		}
	}

	if (!defined $Q->{only})
	{
		# show the scheduled periods for the known automatic actions
		my $fmt = "%-30s%s\n";
		printf("\nAutomatic Schedule:\n$fmt", "Operation","Frequency");
		for ( [ "escalations", "Escalations" ],
					[ "thresholds", "Threshold Computations" ],
					[ "metrics", "Metrics Computation" ],
					[ "configbackup", "Configuration Backup"],
					[ "purge", "Old File Purging"],
					[ "dbcleanup", "Database Cleanup"],
					[ "selftest", "Selftest" ],
					[ "permission_test", "File Permission Test" ],
				)
		{
			my ($key, $label) = @$_;
			# thresholds are usually computed during a node's collect operation
			next if ($key eq "thresholds"
							 and
							 (!NMISNG::Util::getbool($C->{global_threshold}) # totally disabled
								or NMISNG::Util::getbool($C->{threshold_poll_node}))); # or done with node

			my $freq = defined($C->{"schedule_$key"}) && $C->{"schedule_$key"} > 0?
					NMISNG::Util::period_friendly($C->{"schedule_$key"}) : "Disabled";

			printf($fmt,$label, $freq);
		}
	}

	exit 0;
}
# delete-schedule removes a scheduled job entry,
# abort does that and terminates the worker process that is working on that job
elsif ($Q->{act} =~ /^(delete[_-]schedule|abort)$/)
{
	my $wantabort = ($1 eq "abort");

	die "No schedule ID given!\n" if (!$Q->{id});
	my @todo = ref($Q->{id}) eq "ARRAY"? @{$Q->{id}}: $Q->{id};

	for my $id (@todo)
	{
		if ($wantabort)
		{
			my $job = $nmisng->get_queue_model(id => $id);
			if (my $fault = $job->error)
			{
				die "Failed to lookup schedule: $fault\n";
			}
			die "No matching schedule exists!\n" if ($job->count != 1);

			my $thejob = $job->data->[0]; 	# we want the first and only schedule entry
			if ($thejob->{in_progress}
					&& ref($thejob->{status}) eq "HASH"
					&& defined($thejob->{status}->{pid})
					&& $thejob->{status}->{pid} > 1
					&& kill(0,$thejob->{status}->{pid}))
			{
				my $shootme = $thejob->{status}->{pid};
				# let's be careful: is it an nmis process?
				my $pt = Proc::ProcessTable->new(enable_ttys => 0);
				my %bypid = map { ($_->pid => $_) } (@{$pt->table});

				if (defined $bypid{$shootme}
						&& $bypid{$shootme}->cmndline =~ /^nmisd worker/)
				{
					print STDERR "Terminating process $shootme (".$bypid{$shootme}->cmndline.") which owns job $id\n";
					kill("TERM", $shootme);	 # polite
					Time::HiRes::sleep(0.5);
					kill(0,$shootme) && kill("KILL", $shootme); # then firm if required
				}
			}
		}

		my $error = $nmisng->remove_queue(id => $id);
		die "$error\n" if ($error);
	}
	exit 0;
}

# outage management
elsif ($Q->{act} =~ /^outage[_-]help$/)
{
	print $outageusage;
	exit 0;
}
# overview of all or selected outages
elsif ($Q->{act} =~ /^list[_-]outages$/)
{
	my %filter;
	for my $maybe (keys %$Q)
	{
		next if ($maybe !~ /^(id|description|change_id|frequency|start|end|options\.nostats|selector.(config|node).[^=]+)$/);

		if ($Q->{$maybe} =~ m!^/(.*)/(i)?$!)
		{
			my ($re,$options) = ($1,$2);
			$filter{$maybe} = ($options? qr{$re}i : qr{$re});
		}
		else
		{
			$filter{$maybe} =  $Q->{$maybe};
		}
	}

	my $res = NMISNG::Outage::find_outages(filter => \%filter);
	die "Error: failed to find outages: $res->{error}\n" if (!$res->{success});

	if (!@{$res->{outages}})
	{
		print STDERR "No matching outages.\n" if (!$wantquiet);
		exit 0;
	}

	# uuids are 36c wide, align only if output is to tty
	my $fmt = (-t \*STDOUT? "%36s\t%16s\t%30s\t\%10s\t%20s\t%20s\n" : "%s\t%s\t%s\t%s\t%s\t%s\n");
	# header only if tty
	printf($fmt, "ID", "Change ID", "Description",
				 "Frequency", "Start", "End") if (-t \*STDOUT);

	for my $orec (@{$res->{outages}})
	{
		printf($fmt,
					 $orec->{id},
					 $orec->{change_id},
					 $orec->{description},
					 $orec->{frequency},
					 ($orec->{frequency} eq "once" && $orec->{start} =~ /^\d+(\.\d+)?$/?
						POSIX::strftime("%Y-%m-%dT%H:%M:%S", localtime($orec->{start})) : $orec->{start}),
					 ($orec->{frequency} eq "once" && $orec->{end} =~ /^\d+(\.\d+)?$/?
						POSIX::strftime("%Y-%m-%dT%H:%M:%S", localtime($orec->{end})) : $orec->{end})
					 , );

	}
}
# remove one outage by id
elsif ($Q->{act} =~ /^delete[_-]outage$/)
{
	my $outid = $Q->{"id"};
	die "Error: Cannot delete outage without id argument!\n\n$outageusage\n" if (!$outid);

	my $res = NMISNG::Outage::remove_outage(id => $outid, meta => { user => $thislogin });
	die "Error: failed to remove outage: $res->{error}\n" if (!$res->{success});
}
# show one outage structure in flattened form
elsif ($Q->{act} =~ /^show[_-]outage$/)
{
	my $outid = $Q->{"id"};
	die "Error: Cannot show outage without id argument!\n\n$outageusage\n" if (!$outid);

	my $res = NMISNG::Outage::find_outages(filter => { id => $outid });
	die "Error: Failed to lookup outage: $res->{error}" if (!$res->{success});
	# there can be at most one with this id
	my $theoneandonly = $res->{outages}->[0];
	die "Error: No outage with id $outid exists!\n" if (!$theoneandonly);

	my ($error, %flatearth) = NMISNG::Util::flatten_dotfields($theoneandonly);
	for my $k (sort keys %flatearth)
	{
		my $val = $flatearth{$k};
		print "$k=$flatearth{$k}\n";
	}
	exit 0;
}
elsif ($Q->{act} =~ /^update[_-]outage$/)
{
	# update: id required
	my $outid = $Q->{id};

	die "Error: Cannot update outage without id argument!\n\n$outageusage\n"
			if (!$outid);

	# look it up, amend with given values
	my $res = NMISNG::Outage::find_outages(filter => { id => $outid });
	die "Error: Failed to lookup outage: $res->{error}" if (!$res->{success});
	# there can be at most one with this id
	my $updateme = $res->{outages}->[0];
	die "Error: No outage with id $outid exists!\n" if (!$updateme);

	my $dosomething;
	for my $name (grep(/^outage\./, keys %$Q))
	{
		my $dotted = $name; $dotted =~ s/^outage\.//;
		$updateme->{$dotted} = (defined($Q->{$name}) && $Q->{$name} ne "")?
				$Q->{$name} : undef;
		++$dosomething;

		my $error = NMISNG::Util::translate_dotfields($updateme);
		die "Error: translation of arguments failed: $error\n" if ($error);
	}
	die "Error: No changes for outage \"$outid\"!\n" if (!$dosomething);

	$updateme->{id} = $outid;			# bsts...
	$res = NMISNG::Outage::update_outage(%$updateme, meta => { user => $thislogin });
	die "Error: Failed to update \"$outid\": $res->{error}\n" if (!$res->{success});
}
elsif ($Q->{act} =~ /^create[_-]outage$/)
{
	# create w/o args? show help
	die "Error: Cannot create outage without arguments!\n\n$outageusage\n"
			if (!grep(/^outage\./, keys %$Q));

	my ($addables,%createme);
	for my $name (grep(/^outage\./, keys %$Q))
	{
		my $dotted = $name; $dotted =~ s/^outage\.//;
		$createme{$dotted} = (defined($Q->{$name}) && $Q->{$name} ne "")?
				$Q->{$name} : undef;
		++$addables;

		my $error = NMISNG::Util::translate_dotfields(\%createme);
		die "Error: translation of arguments failed: $error\n" if ($error);
	}
	die "Error: No valid arguments for creating an outage!\n\n$outageusage\n" if (!$addables);
	# make sure the user doesn't pass a clashing id arg!
	$createme{id} //= $Q->{id} if (defined $Q->{id});
	if ($createme{id})
	{
		my $clash = NMISNG::Outage::find_outages(filter => { id => $createme{id} });
		die "Error: Failed to lookup outage: $clash->{error}" if (!$clash->{success});
		die "Error: Cannot create outage with id \"$createme{id}\": already exists!\n"
				if (@{$clash->{outages}});
	}

	my $res = NMISNG::Outage::update_outage(%createme, meta => { user => $thislogin });
	die "Error: Failed to create: $res->{error}\n" if (!$res->{success});

	# print the created id if not quiet, and without fluff if not tty
	print((-t \*STDOUT? "Created outage \"$res->{id}\"\n" : $res->{id}."\n"))
			if (!$wantquiet);
	exit 0;
}
elsif ($Q->{act} =~ /^check[_-]outages$/)
{
	my $nodeobj;									# particular node?

	if (my $nodename = $Q->{node} or my $uuid = $Q->{uuid})
	{
		my %nodesel;
		$nodesel{name} = $nodename if ($nodename);
		$nodesel{uuid} = $uuid if ($uuid);

		$nodeobj = $nmisng->node(%nodesel);
		die "Invalid node/uuid arguments, no matching node exists!\n"
				if (!$nodeobj);
	}

	my $when = $Q->{time} || time;
	if ($when !~ /^\d+(\.\d+)?$/)
	{
		$when = NMISNG::Util::parseDateTime($when) || NMISNG::Util::getUnixTime($when);
	}


	my $res = NMISNG::Outage::check_outages( node => $nodeobj, nmisng => $nmisng, time => $when);
	die "Failed to check outages: $res->{error}\n" if (!$res->{success});


	print "\nRelevant outages"
			.($nodeobj? (" for node ".$nodeobj->name.", "):"")
			." at time "
			.localtime($when).":\n";

	for (["Past:", "past"], ["Future:", "future"], ["Current: ", "current" ])
	{
		my ($tag, $source) = @$_;

		if (!@{$res->{$source}})
		{
			print "$tag None\n";
		}
		else
		{
			my @output;
			for my $match (@{$res->{$source}})
			{
				my $msg = "\n\t\"$match->{description}\" ($match->{id})\n\t$match->{frequency} from '"
						. ($match->{start} =~ /^\d+(\.\d+)?$/? scalar(localtime($match->{start})) : $match->{start})
						."' to '"
						. ($match->{end} =~ /^\d+(\.\d+)?$/? scalar(localtime($match->{end})) : $match->{end})."'";
				$msg .= "\n\t(actual '".localtime($match->{actual_start}). "' to '".localtime($match->{actual_end})."')"
						if ($match->{actual_start});
				push @output, $msg;
			}
			print "$tag ".join("\n\n", @output)."\n";
		}
	}
	print "\n";
	exit 0;
}

elsif ($Q->{act} eq "run-reports")
{
	my ($period, $reporttype) = @{$Q}{"period","type"};

	die "Unknown date=$period selected!\n$usage\n"
			if ($period !~ /^(day|week|month)$/i);
	die "Unknown report=$reporttype selected!\n$usage\n"
			if ($reporttype !~ /^(all|times|health|top10|outage|response|avail|port)$/);

	my $reportdir = $C->{report_root};
	NMISNG::Util::createDir($reportdir) if (!-d $reportdir);
	my ($start, $end, $outfile);
	my $time = time();

	# fixme9: is this warning still applicable at all?
	# attention: the file naming logic here must match purge_files() in cgi-bin/reports.pl,
	# or unwanted ancient reports will be left behind!
	if ($period eq 'day')
	{
		my ($s,$m,$h) = (localtime($time))[0..2];
		$end = $time-($s+($m*60)+($h*60*60));
		$start = $end - (60*60*24); # yesterday

		$outfile= POSIX::strftime("day-%d-%m-%Y-%a.html",localtime($start));
	}
	elsif ($period eq 'week')
	{
		my ($s,$m,$h,$wd) = (localtime($time))[0..2,6];
		$end = $time-($s+($m*60)+($h*60*60)+($wd*60*60*24));
		$start = $end - (60*60*24*7); # last weekend

		$outfile = POSIX::strftime("week-%d-%m-%Y-%a.html",localtime($start));
	}
	elsif ($period eq 'month')
	{
		my ($m,$y) = (localtime($time))[4,5];
		$end = timelocal(0,0,0,1,$m,$y);
		$m -= 1;
		if ($m < 0) {
			$m = 11; $y -= 1;
		}
		$start = timelocal(0,0,0,1,$m,$y);

		$outfile =  POSIX::strftime("month-%m-%Y.html",localtime($start));
	}

	my @todos = ($reporttype eq "all"? (qw(times health top10 outage response avail port)) : $reporttype);
	for my $thisreport (@todos)
	{
		my $file = "$reportdir/${thisreport}-${outfile}";
		my $status = system("$C->{'<nmis_cgi>'}/reports.pl", "report=$thisreport",
												"start=$start", "end=$end", "outfile=$file") >> 8;
		NMISNG::Util::logMsg("ERROR (report) generating report=$thisreport file=$file: $!") if ($status);
		NMISNG::Util::setFileProtDiag(file =>$file) if (-f $file);
	}
}
elsif ($Q->{act} eq "config-backup")
{
	my $res = $nmisng->config_backup;
	die "$res->{error}\n" if (!$res->{success});

	print "Configuration Backup saved as \"$res->{file}\".\n" if ($Q->{info});
}
elsif ($Q->{act} eq 'purge')
{
	my $res = $nmisng->purge_old_files(simulate => $Q->{simulate});
	die "$res->{error}\n" if (!$res->{success});
	print join("\n", @{$res->{info}}),"\n" if ($Q->{info} or NMISNG::Util::getbool($Q->{simulate}));

	$res = NMISNG::Outage::purge_outages(nmisng => $nmisng,
																			 simulate => $Q->{simulate});
	die "$res->{error}\n" if (!$res->{success});
	print join("\n", @{$res->{info}}),"\n" if ($Q->{info} or NMISNG::Util::getbool($Q->{simulate}));
}
elsif ($Q->{act} eq "dbcleanup")
{
	my $res = $nmisng->dbcleanup(simulate => $Q->{simulate});
	die "$res->{error}\n" if (!$res->{success});

	print join("\n", @{$res->{info}}),"\n" if ($Q->{info} or NMISNG::Util::getbool($Q->{simulate}));
}
elsif ($Q->{act} eq 'noderefresh')
{
	noderefresh();
}
elsif ($Q->{act} eq "fixperms")
{
	if ($wantverbose)
	{
		print "Fixing the permissions for NMIS9 based on the configuration $C->{configfile}\nOperating on base directory: $C->{'<nmis_base>'}\nSetting owner to $C->{nmis_user}, group $C->{nmis_group}\n";
	}

	if ( $< != 0)
	{
		print STDERR "\nWARNING: Not running with root privileges, so this operation may not succeed entirely!\n\n";
	}
	else
	{
		system("chown","-R","$C->{nmis_user}:$C->{nmis_group}", $C->{'<nmis_base>'});
		system("chmod","-R","g+rw", $C->{'<nmis_base>'});

		if ( $C->{'<nmis_base>'} ne $C->{'<nmis_data>'} )
		{
			system("chown","-R", "$C->{nmis_user}:$C->{nmis_group}",
						 $C->{'<nmis_data>'});

			system("chmod","-R","g+rw", $C->{'<nmis_data>'});
		}
	}

	# single depth directories
	my %done;
	for my $location ($C->{'<nmis_data>'}, # commonly same as base
										$C->{'<nmis_base>'},
										$C->{'<nmis_admin>'}, $C->{'<nmis_bin>'}, $C->{'<nmis_cgi>'},
										$C->{'<nmis_models>'},
										$C->{'<nmis_default_models>'},
										$C->{'<nmis_logs>'},
										$C->{'log_root'}, # should be the same as nmis_logs
										$C->{'config_logs'},
										$C->{'json_logs'},
										$C->{'<menu_base>'},
										$C->{'report_root'},
										$C->{'script_root'}, # commonly under nmis_conf
										$C->{'plugin_root'}, # ditto
										# fixme: removed when opstatus is in db
										$C->{'<nmis_var>'}."/nmis_system/timestamps", )
	{
		next if ($done{$location});

		if (!-d $location)
		{
			print "Creating missing directory $location\n" if ($wantverbose);
			NMISNG::Util::createDir($location);
		}
		NMISNG::Util::setFileProtDirectory($location, "false");

		$done{$location} = 1;
	}

	# deeper dirs with recursion
	%done = ();
	for my $location ($C->{'<nmis_base>'}."/lib",
										$C->{'<nmis_conf>'},
										$C->{'<nmis_var>'},
										$C->{'<nmis_menu>'},
										$C->{'mib_root'},
										$C->{'database_root'},
										$C->{'web_root'}, )
	{
		next if ($done{$location});

		if (!-d $location)
		{
			print "Creating missing directory $location\n" if ($wantverbose);
			NMISNG::Util::createDir($location);
		}
		NMISNG::Util::setFileProtDirectory($location, "true");

		$done{$location} = 1;
	}

	# remove the selftest cache file to ensure it's regenerated;
	# otherwise we may show stale warnings about permissions that were already fixed
	unlink($C->{'<nmis_var>'}."/nmis_system/selftest.json");
}
elsif ($Q->{act} eq "groupsync")
{
	# iterate over nodes and add any new groups to the configuration
	# this is normally NOT automated, as groups are an administrative feature
	# for maintenance (as nodes in unlisted groups are active but not
	# shown in the gui)

	my $NT = Compat::NMIS::loadLocalNodeTable();    # only local nodes
	NMISNG::Util::dbg( "table Local Node loaded", 2 );

	# reread the config with a lock and unflattened
	my $fn = $C->{'<nmis_conf>'}. "/Config.nmis";
	my ( $rawC, $fh ) = NMISNG::Util::readFiletoHash(file => $fn, lock => 'true' );
	die "Error: failed to read config $fn!\n" if ( !$rawC or !keys %$rawC );

	my %oldgroups = map { $_ => 1 } ( split( /\s*,\s*/, $rawC->{system}->{group_list} ) );
	my %newgroups;
	for my $node ( keys %$NT )
	{
		my $thisgroup = $NT->{$node}->{group};
		next if ( $oldgroups{$thisgroup} );
		++$newgroups{$thisgroup};
	}

	print "Existing groups:\n\t", ( %oldgroups ? join( "\n\t", keys %oldgroups ) : "<None>" ),
	"\n\nNew groups to add:\n\t", ( %newgroups ? join( "\n\t", keys %newgroups ) : "<None>" ),
	"\n\n";

	if (%newgroups)
	{
		$rawC->{system}->{group_list} = join( ",", sort( keys %oldgroups, keys %newgroups ) );
		NMISNG::Util::writeHashtoFile( file => $fn, handle => $fh, data => $rawC );
	}
	else
	{
		close $fh;									# release lock
	}
}
# do sanitary checking on inventory
elsif ($Q->{act} eq 'check_inventory')
{
	my ($entries,$error) = NMISNG::Inventory::check_inventory_for_bad_things($nmisng,$Q->{min_size});
	if( $error )
	{
		print "Error: ".Dumper($error);
	}
	else
	{
		print "Result: ".Dumper($entries);
	}
}
else
{
	die $usage;
}
exit 0;



# resave nodes, forces lastupdate to be new and all validation to be run
sub noderefresh
{
	my $updated = 0;
	# get all nodes
	my $md = $nmisng->get_nodes_model( name => $Q->{node} );
	my $object_ret = $md->objects();
	if( $object_ret->{success} )
	{
		foreach my $node ( @{$object_ret->{objects}} )
		{
			# tell the node it's dirty so the save happens
			$node->configuration( $node->configuration );
			$node->_dirty(1,"nothing");
			my ($op,$error) = $node->save();
			if( $op < 1 || $error )
			{
				print "Error saving: ".$node->name.", op:$op, error: $error"
			}
			else
			{
				$updated++;
			}
		}
	}
	else
	{
		print "Error making node objects: $object_ret->{error}\n";
	}
	print "total nodes: ".$md->count.", updated:$updated\n";
}
