#!/usr/bin/perl
#
#  Copyright 1999-2014 Opmantek Limited (www.opmantek.com)
#
#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM
#
#  This file is part of Network Management Information System ("NMIS").
#
#  NMIS is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  NMIS is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with NMIS (most likely in a file named LICENSE).
#  If not, see <http://www.gnu.org/licenses/>
#
#  For further information on NMIS or for a license other than GPL please see
#  www.opmantek.com or email contact@opmantek.com
#
#  User group details:
#  http://support.opmantek.com/users/
#
# *****************************************************************************
use strict;
our $VERSION = "9.0.0a";

use FindBin;
use lib "$FindBin::Bin/../lib";

use POSIX qw();
use File::Basename;
use File::Spec;
use File::Find;
use Data::Dumper;
use Time::Local;

# this imports the LOCK_ *constants (eg. LOCK_UN, LOCK_EX), also the stat modes
use Fcntl qw(:DEFAULT :flock :mode);
use Errno qw(EAGAIN ESRCH EPERM);


use Compat::NMIS;			# fixme9: should we rewrite add-outage code to not use loadLocalNodeTable?
use NMISNG;
use NMISNG::Log;
use NMISNG::Util;

if ( @ARGV == 1 && $ARGV[0] eq "--version" )
{
	print "version=$VERSION\n";
	exit 0;
}

my $thisprogram = basename($0);
my $usage       = "Usage: $thisprogram [option=value...] <act=command>

 act=import-nodes-file nodesfile=<path>
 act=import-nodeconf nodeconf=<path>

 act=add-outage {node|group}=name start=HH:MM end=HH:MM [comment=text]
 act=run-reports period=<day|week|month> type=<all|times|health|top10|outage|response|avail|port>
 act=config-backup
 act=purge [simulate=t/f]
 act=fixperms
\n";

die $usage if ( !@ARGV || $ARGV[0] =~ /^-(h|\?|-help)$/ );
my $Q = NMISNG::Util::get_args_multi(@ARGV);

my $wantverbose = (NMISNG::Util::getbool($Q->{verbose}));

my $customconfdir = $Q->{dir}? $Q->{dir}."/conf" : undef;
my $C      = NMISNG::Util::loadConfTable(dir => $customconfdir,
																				 debug => $Q->{debug}, 
																				 info => $Q->{info});
die "no config available!\n" if (ref($C) ne "HASH" or !keys %$C);

# log to stderr if debug or info are given
my $logfile = $C->{'<nmis_logs>'} . "/cli.log";
my $error = NMISNG::Util::setFileProtDiag(file => $logfile) if (-f $logfile);
warn "failed to set permissions: $error\n" if ($error);

my $logger = NMISNG::Log->new(
	debug => $Q->{debug},
	info  => $Q->{info},
	level => $C->{log_level},
	path  => (defined($Q->{debug}) or defined($Q->{info}) ? undef: $logfile),
		);

my $nmisng = NMISNG->new(
	config => $C,
	log    => $logger,
);


if ( $Q->{act} eq "import-nodes-file" )
{
	my $nodesfile = $Q->{nodesfile};
	my $node_table =  $nodesfile? NMISNG::Util::readFiletoHash(file => $nodesfile)
			: NMISNG::Util::loadTable( dir => 'conf', name => 'Nodes' );

	foreach my $node_name_key ( keys %$node_table )
	{
		my $node_configuration = $node_table->{$node_name_key};
		my $node = $nmisng->node( uuid => $node_configuration->{uuid}, create => 1 );

		# set the configuration, ensure that the right cluster_id is set
 		if ( $node->is_new )
		{
			$node_configuration->{cluster_id} = $C->{cluster_id};
			$node->configuration($node_configuration);
		}

		# save
		my ($op,$error) = $node->save();
		$logger->error("Error saving node:",$error) if($error);
		$logger->debug( "$node_name_key saved to database, op:", $op );
	}
}
elsif ( $Q->{act} eq "import-nodeconf" )
{
	$logger->info( "Starting " . $Q->{act} );

	my $ncdir = $Q->{nodeconf} || ($C->{'<nmis_conf>'} . "/nodeconf");
	opendir( D, $ncdir )
		or $logger->error("Cannot open nodeconf dir $ncdir: $!");
	my @cands = grep( /^[a-z0-9_-]+\.json$/, readdir(D) );
	closedir(D);

	for my $maybe (@cands)
	{
		my $data = NMISNG::Util::readFiletoHash( file => "$ncdir/$maybe", json => 1 );
		if ( ref($data) ne "HASH" or !keys %$data or !$data->{name} )
		{
			$logger->error("nodeconf $ncdir/$maybe had invalid data! Skipping.");
			next;
		}

		# get the node, don't create it, it must exist
		my $node_name = $data->{name};
		my $node = $nmisng->node( name => $node_name );
		if ( !$node )
		{
			$logger->error("trying to import nodeconf for $data->{name} when node is not in db! Skipping.");
			next;
		}

		# don't bother saving the name in it
		delete $data->{name};
		$node->overrides($data);
		my ($op,$error) = $node->save();
		$logger->error("Error saving node:",$error) if($error);
		$logger->debug( "$node_name overrides saved to database, op:" . $op );
	}
	$logger->info( "Done " . $Q->{act} );
}
elsif ($Q->{act} eq "add-outage")
{
	my $outages = NMISNG::Util::loadTable(dir => "conf", name => "Outage");
	my $nodes = Compat::NMIS::loadLocalNodeTable;

	die "Invalid arguments!\n$usage"
			if (!$Q->{start} || !$Q->{end}
					|| !( $Q->{group} xor $Q->{node} )
					|| $Q->{start} !~ /^\d+:\d+$/ || $Q->{end} !~ /^\d+:\d+$/ );

	die "Unknown node \"$Q->{node}\" given, aborting!\n"
			if ($Q->{node} && !$nodes->{$Q->{node}});

	my @now = localtime;
	my @hm = split(/:/, $Q->{start});

	die "start time \"$Q->{start}\" unparseable!\n"
			if ($hm[0]>=24 || $hm[1]>=60);

	my $begtime = POSIX::mktime(0,$hm[1],$hm[0],@now[3..5]);
	@hm = split(/:/, $Q->{end});

	die "end time \"$Q->{end}\" unparseable!\n"
			if ($hm[0]>=24 || $hm[1]>=60);

	my $endtime = POSIX::mktime(0,$hm[1],$hm[0],@now[3..5]);

	# if the endtime is earlier than the begin, add one day to end
	if ( $endtime < $begtime )
	{
		$endtime += 86400;
	}
	# if the time specified is earlier than now, add one day
	if ( $begtime < time )
	{
		$begtime += 86400;
		$endtime += 86400;
	}

	my @candidates = $Q->{node}? ($Q->{node})
			: (grep { $nodes->{$_}->{group} eq $Q->{group} } keys %{$nodes}); # fixme9 better way to get the nodes of a group?

	die "group \"$Q->{group}\" has no members, aborting!\n" if (!@candidates);

	print "Outage window is from ".localtime($begtime)." to ".
			localtime($endtime)."\n" if ($wantverbose);

	for my $node (@candidates)
	{
		$outages->{ join("-",$node,$begtime,$endtime) } = {
			node => $node,
			start => $begtime,
			end => $endtime,
			change => $Q->{comment} };

		print "Applying to node $node\n"
				if ($wantverbose);
	}
	NMISNG::Util::writeTable(dir=> "conf", name => "Outage", data => $outages);
}
elsif ($Q->{act} eq "run-reports")
{
	my ($period, $reporttype) = @{$Q}{"period","type"};

	die "Unknown date=$period selected!\n$usage\n"
			if ($period !~ /^(day|week|month)$/i);
	die "Unknown report=$reporttype selected!\n$usage\n"
			if ($reporttype !~ /^(all|times|health|top10|outage|response|avail|port)$/);

	my $reportdir = $C->{report_root};
	NMISNG::Util::createDir($reportdir) if (!-d $reportdir);
	my ($start, $end, $outfile);
	my $time = time();

	# fixme9: is this warning still applicable at all?
	# attention: the file naming logic here must match purge_files() in cgi-bin/reports.pl,
	# or unwanted ancient reports will be left behind!
	if ($period eq 'day')
	{
		my ($s,$m,$h) = (localtime($time))[0..2];
		$end = $time-($s+($m*60)+($h*60*60));
		$start = $end - (60*60*24); # yesterday

		$outfile= POSIX::strftime("day-%d-%m-%Y-%a.html",localtime($start));
	}
	elsif ($period eq 'week')
	{
		my ($s,$m,$h,$wd) = (localtime($time))[0..2,6];
		$end = $time-($s+($m*60)+($h*60*60)+($wd*60*60*24));
		$start = $end - (60*60*24*7); # last weekend

		$outfile = POSIX::strftime("week-%d-%m-%Y-%a.html",localtime($start));
	}
	elsif ($period eq 'month')
	{
		my ($m,$y) = (localtime($time))[4,5];
		$end = timelocal(0,0,0,1,$m,$y);
		$m -= 1;
		if ($m < 0) {
			$m = 11; $y -= 1;
		}
		$start = timelocal(0,0,0,1,$m,$y);

		$outfile =  POSIX::strftime("month-%m-%Y.html",localtime($start));
	}

	my @todos = ($reporttype eq "all"? (qw(times health top10 outage response avail port)) : $reporttype);
	for my $thisreport (@todos)
	{
		my $file = "$reportdir/${thisreport}-${outfile}";
		my $status = system("$C->{'<nmis_cgi>'}/reports.pl", "report=$thisreport",
												"start=$start", "end=$end", "outfile=$file") >> 8;
		NMISNG::Util::logMsg("ERROR (report) generating report=$thisreport file=$file: $!") if ($status);
		NMISNG::Util::setFileProtDiag(file =>$file) if (-f $file);
	}
}
elsif ($Q->{act} eq "config-backup")
{
	my $backupdir = $C->{'<nmis_backups>'};

	if (!-d $backupdir)
	{
		mkdir($backupdir,0700) or die "Cannot create $backupdir: $!\n";
	}

	die "Cannot write to directory $backupdir, check permissions!\n"
			if (!-w $backupdir);
	die "Cannot read directory $backupdir, check permissions!\n"
			if (!-r $backupdir or !-x $backupdir);

	# now let's take a new backup...
	my $backupprefix = "nmis-config-backup-";
	my $backupfilename = "$backupdir/$backupprefix".POSIX::strftime("%Y-%m-%d-%H%M",localtime).".tar";

	# ...of _custom_ (and default models for good measure),
	# and configuration...
	my @relativepaths = (map { File::Spec->abs2rel($_, $C->{'<nmis_base>'}) }
											 ($C->{'<nmis_models>'},
												$C->{'<nmis_default_models>'},
												$C->{'<nmis_conf>'}));

	my $status = system("tar","-cf",$backupfilename,
											"-C", $C->{'<nmis_base>'},
											@relativepaths);
	if ($status == -1)
	{
		die "Failed to execute tar!\n";
	}
	elsif ($status & 127)
	{
		die "Backup failed, tar killed with signal ".($status & 127)."\n";
	}
	elsif ($status >> 8)
	{
		die "Backup failed, tar exited with exit code ".($status >> 8)."\n";
	}

	# ...and the various cron files
	my $td = File::Temp::tempdir(CLEANUP => 1);
	chdir $td or die "cannot chdir to $td: $!\n";
	mkdir("$td/cron",0755) or die "Cannot create $td/cron: $!\n";
	system("cp -a /etc/cron* cron/ 2>/dev/null");
	system("crontab -l -u root > cron/root_crontab 2>/dev/null");
	system("crontab -l -u nmis > cron/nmis_crontab 2>/dev/null");

	$status = system("tar","-rf",$backupfilename,"cron");
	if ($status == -1)
	{
		die "Failed to execute tar!\n";
	}
	elsif ($status & 127)
	{
		die "Backup failed, tar killed with signal ".($status & 127)."\n";
	}
	elsif ($status >> 8)
	{
		die "Backup failed, tar exited with exit code ".($status >> 8)."\n";
	}
	$status = system("gzip",$backupfilename);
	chdir("/");											# so that the tempdir can be cleaned up
	exit $status >> 8;
}
elsif ($Q->{act} eq 'purge')
{
	my $res = purge_files(simulate => $Q->{simulate});
	die "$res\n" if ($res);
}
elsif ($Q->{act} eq "fixperms")
{
	if ($wantverbose)
	{
		print "Fixing the permissions for NMIS9 based on the configuration $C->{configfile}\nOperating on base directory: $C->{'<nmis_base>'}\nSetting owner to $C->{nmis_user}, group $C->{nmis_group}\n";
	}

	if ( $< != 0)
	{
		print "\nWARNING: Not running with root privileges, so this operation may not work fully!\n\n";
	}
	else
	{
		system("chown","-R","$C->{nmis_user}:$C->{nmis_group}",$C->{'<nmis_base>'});
		system("chmod","-R","g+rw", $C->{'<nmis_base>'});

		if ( $C->{'<nmis_base>'} ne $C->{'<nmis_data>'} )
		{
			system("chown","-R", "$C->{nmis_user}:$C->{nmis_group}",
						 $C->{'<nmis_data>'});

			system("chmod","-R","g+rw", $C->{'<nmis_data>'});
		}
	}

	# single depth directories
	my %done;
	for my $location ($C->{'<nmis_data>'}, # commonly same as base
										$C->{'<nmis_base>'},
										$C->{'<nmis_admin>'}, $C->{'<nmis_bin>'}, $C->{'<nmis_cgi>'},
										$C->{'<nmis_models>'},
										$C->{'<nmis_default_models>'},
										$C->{'<nmis_logs>'},
										$C->{'log_root'}, # should be the same as nmis_logs
										$C->{'config_logs'},
										$C->{'json_logs'},
										$C->{'<menu_base>'},
										$C->{'report_root'},
										$C->{'script_root'}, # commonly under nmis_conf
										$C->{'plugin_root'}, ) # ditto
	{
		NMISNG::Util::setFileProtDirectory($location, "false")
				if (!$done{$location});
		$done{$location} = 1;
	}

	# deeper dirs with recursion
	%done = ();
	for my $location ($C->{'<nmis_base>'}."/lib",
										$C->{'<nmis_conf>'},
										$C->{'<nmis_var>'},
										$C->{'<nmis_menu>'},
										$C->{'mib_root'},
										$C->{'database_root'},
										$C->{'web_root'}, )
	{
		NMISNG::Util::setFileProtDirectory($location, "true") 	if (!$done{$location});
		$done{$location} = 1;
	}

	# remove the selftest cache file to ensure it's regenerated;
	# otherwise we may show stale warnings about permissions that were already fixed
	unlink($C->{'<nmis_var>'}."/nmis_system/selftest.json");
}
else
{
	die $usage;
}
exit 0;

# this is a maintenance command for removing old, broken or unwanted files,
# replaces and extends the old admin/nmis_file_cleanup.sh
#
# args: simulate (default: false, if true only prints
# what it would do)
# returns: undef if ok, error message otherwise
sub purge_files
{
	my (%args) = @_;
	my %nukem;

	my $simulate = NMISNG::Util::getbool( $args{simulate} );

	NMISNG::Util::info("Starting to look for purgable files"
										 .($simulate? ", in simulation mode":"") );

	# config option, extension, where to look...
	my @purgatory = (
		{   ext          => qr/\.rrd$/,
			minage       => $C->{purge_rrd_after} || 30 * 86400,
			location     => $C->{database_root},
			also_empties => 1,
			description  => "Old RRD files",
		},
		{   ext          => qr/\.(tgz|tar\.gz)$/,
			minage       => $C->{purge_backup_after} || 30 * 86400,
			location     => $C->{'<nmis_backups>'},
			also_empties => 1,
			description  => "Old Backup files",
		},
		{
			# old nmis state files - legacy .nmis under var
			minage => $C->{purge_state_after} || 30 * 86400,
			ext => qr/\.nmis$/,
			location     => $C->{'<nmis_var>'},
			also_empties => 1,
			description  => "Legacy .nmis files",
		},
		{
			# old nmis state files - json files but only directly in var,
			# or in network or in service_status
			minage => $C->{purge_state_after} || 30 * 86400,
			location     => $C->{'<nmis_var>'},
			path         => qr!^$C->{'<nmis_var>'}/*(network|service_status)?/*[^/]+\.json$!,
			also_empties => 1,
			description  => "Old JSON state files",
		},
		{
			# old nmis state files - json files under nmis_system,
			# except auth_failure files
			minage => $C->{purge_state_after} || 30 * 86400,
			location     => $C->{'<nmis_var>'} . "/nmis_system",
			notpath      => qr!^$C->{'<nmis_var>'}/nmis_system/auth_failures/!,
			ext          => qr/\.json$/,
			also_empties => 1,
			description  => "Old internal JSON state files",
		},
		{
			# broken empty json files - don't nuke them immediately, they may be tempfiles!
			minage       => 3600,                       # 60 minutes seems a safe upper limit for tempfiles
			ext          => qr/\.json$/,
			location     => $C->{'<nmis_var>'},
			only_empties => 1,
			description  => "Empty JSON state files",
		},
		{   minage => $C->{purge_event_after} || 30 * 86400,
			path => qr!events/.+?/history/.+\.json$!,
			also_empties => 1,
			location     => $C->{'<nmis_var>'} . "/events",
			description  => "Old event history files",
		},
		{   minage => $C->{purge_jsonlog_after} || 30 * 86400,
			also_empties => 1,
			ext          => qr/\.json/,
			location     => $C->{json_logs},
			description  => "Old JSON log files",
		},
	);

	for my $rule (@purgatory)
	{
		my $olderthan = time - $rule->{minage};
		next if ( !$rule->{location} );
		NMISNG::Util::info("checking dir $rule->{location} for $rule->{description}");

		File::Find::find(
			{   wanted => sub {
					my $localname = $_;

					# don't need it at the moment my $dir = $File::Find::dir;
					my $fn   = $File::Find::name;
					my @stat = stat($fn);

					next
						if (
						!S_ISREG( $stat[2] )    # not a file
						or ( $rule->{ext}     and $localname !~ $rule->{ext} )    # not a matching ext
						or ( $rule->{path}    and $fn !~ $rule->{path} )          # not a matching path
						or ( $rule->{notpath} and $fn =~ $rule->{notpath} )
						);                                                        # or an excluded path

					# also_empties: purge by age or empty, versus only_empties: only purge empties
					if ( $rule->{only_empties} )
					{
						next if ( $stat[7] );                                     # size
					}
					else
					{
						next
							if (
							( $stat[7] or !$rule->{also_empties} )                # zero size allowed if empties is off
							and ( $stat[9] >= $olderthan )
							);                                                    # younger than the cutoff?
					}
					$nukem{$fn} = $rule->{description};
				},
				follow => 1,
			},
			$rule->{location}
		);
	}

	for my $fn ( sort keys %nukem )
	{
		my $shortfn = File::Spec->abs2rel( $fn, $C->{'<nmis_base>'} );
		if ($simulate)
		{
			print "purge: rule '$nukem{$fn}' matches $shortfn\n";
		}
		else
		{
			NMISNG::Util::info("removing $shortfn (rule '$nukem{$fn}')");
			unlink($fn) or return "Failed to unlink $fn: $!";
		}
	}
	NMISNG::Util::info("Purging complete");
	return;
}
