#
## $Id: Model-net-snmp.nmis,v 8.4 2012/08/14 12:20:36 keiths Exp $
#
#  Copyright 1999-2011 Opmantek Limited (www.opmantek.com)
#  
#  ALL CODE MODIFICATIONS MUST BE SENT TO CODE@OPMANTEK.COM
#  
#  This file is part of Network Management Information System (NMIS).
#  
#  NMIS is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  NMIS is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with NMIS (most likely in a file named LICENSE).  
#  If not, see <http://www.gnu.org/licenses/>
#  
#  For further information on NMIS or for a license other than GPL please see
#  www.opmantek.com or email contact@opmantek.com 
#  
#  User group details:
#  http://support.opmantek.com/users/
#  
# *****************************************************************************

%hash = (
  '-common-' => {
    'class' => {
      'database' => {
        'common-model' => 'database'
      },
      'event' => {
        'common-model' => 'event'
      },
      'heading' => {
        'common-model' => 'heading'
      },
      'stats' => {
        'common-model' => 'stats'
      },
      'summary' => {
        'common-model' => 'summary'
      },
      'threshold' => {
        'common-model' => 'threshold'
      }
    }
  },
  'system' => {
    'nodeModel' => 'net-snmp',
    'nodeType' => 'server',
    'nodeVendor' => 'net-snmp',
    'nodegraph' => 'health,response,ip,tcp-conn,tcp-segs,hrsystem,ss-cpu,ss-blocks,laload,hrsmpcpu,hrmem,hrcachemem,hrbufmem,hrswapmem,hrvmem',
    'rrd' => {
      'nodehealth' => {
        'graphtype' => 'hrsystem',
        'snmp' => {
          'hrSystemProcesses' => {
            'oid' => 'hrSystemProcesses'
          },
          'hrSystemNumUsers' => {
            'oid' => 'hrSystemNumUsers'
          }
        }
      },
      'laload' => {
        'graphtype' => 'laload',
        'snmp' => {
          'laLoad1' => {
            'oid' => 'laLoad.1',
            'option' => 'gauge,0:U'
          },
          'laLoad5' => {
            'oid' => 'laLoad.2',
            'option' => 'gauge,0:U'
          }
        }
      },
      'mib2ip' => {
        'graphtype' => 'ip,frag',
        'snmp' => {
          'ipForwDatagrams' => {
            'oid' => 'ipForwDatagrams',
            'option' => 'counter,0:U'
          },
          'ipFragCreates' => {
            'oid' => 'ipFragCreates',
            'option' => 'counter,0:U'
          },
          'ipFragFails' => {
            'oid' => 'ipFragFails',
            'option' => 'counter,0:U'
          },
          'ipFragOKs' => {
            'oid' => 'ipFragOKs',
            'option' => 'counter,0:U'
          },
          'ipInAddrErrors' => {
            'oid' => 'ipInAddrErrors',
            'option' => 'counter,0:U'
          },
          'ipInDelivers' => {
            'oid' => 'ipInDelivers',
            'option' => 'counter,0:U'
          },
          'ipInDiscards' => {
            'oid' => 'ipInDiscards',
            'option' => 'counter,0:U'
          },
          'ipInHdrErrors' => {
            'oid' => 'ipInHdrErrors',
            'option' => 'counter,0:U'
          },
          'ipInReceives' => {
            'oid' => 'ipInReceives',
            'option' => 'counter,0:U'
          },
          'ipInUnknownProtos' => {
            'oid' => 'ipInUnknownProtos',
            'option' => 'counter,0:U'
          },
          'ipOutDiscards' => {
            'oid' => 'ipOutDiscards',
            'option' => 'counter,0:U'
          },
          'ipOutRequests' => {
            'oid' => 'ipOutRequests',
            'option' => 'counter,0:U'
          },
          'ipReasmFails' => {
            'oid' => 'ipReasmFails',
            'option' => 'counter,0:U'
          },
          'ipReasmOKs' => {
            'oid' => 'ipReasmOKs',
            'option' => 'counter,0:U'
          },
          'ipReasmReqds' => {
            'oid' => 'ipReasmReqds',
            'option' => 'counter,0:U'
          }
        }
      },
      'systemStats' => {
        'graphtype' => 'ss-cpu,ss-blocks,ss-intcon',
        'snmp' => {
          'ssCpuRawIdle' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawIdle.0 = Counter32: 336740221',
            'oid' => 'ssCpuRawIdle',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawIdle'
          },
          'ssCpuRawInterrupt' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawInterrupt.0 = Counter32: 93048',
            'oid' => 'ssCpuRawInterrupt',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawInterrupt'
          },
          'ssCpuRawKernel' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawKernel.0 = Counter32: 0',
            'oid' => 'ssCpuRawKernel',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawKernel'
          },
          'ssCpuRawNice' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawNice.0 = Counter32: 1294466',
            'oid' => 'ssCpuRawNice',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawNice'
          },
          'ssCpuRawSoftIRQ' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawSoftIRQ.0 = Counter32: 4101707',
            'oid' => 'ssCpuRawSoftIRQ',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawSoftIRQ'
          },
          'ssCpuRawSystem' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawSystem.0 = Counter32: 15958442',
            'oid' => 'ssCpuRawSystem',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawSystem'
          },
          'ssCpuRawUser' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawUser.0 = Counter32: 114857779',
            'oid' => 'ssCpuRawUser',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawUser'
          },
          'ssCpuRawWait' => {
            'info' => 'UCD-SNMP-MIB::ssCpuRawWait.0 = Counter32: 17718957',
            'oid' => 'ssCpuRawWait',
            'option' => 'counter,0:U',
            'title' => 'ssCpuRawWait'
          },
          'ssIORawReceived' => {
            'info' => 'UCD-SNMP-MIB::ssIORawReceived.0 = Counter32: 15277366',
            'oid' => 'ssIORawReceived',
            'option' => 'counter,0:U',
            'title' => 'ssIORawReceived'
          },
          'ssIORawSent' => {
            'info' => 'UCD-SNMP-MIB::ssIORawSent.0 = Counter32: 2246167484',
            'oid' => 'ssIORawSent',
            'option' => 'counter,0:U',
            'title' => 'ssIORawSent'
          },
          'ssRawContexts' => {
            'info' => 'UCD-SNMP-MIB::ssRawContexts.0 = Counter32: 1623525406',
            'oid' => 'ssRawContexts',
            'option' => 'counter,0:U',
            'title' => 'ssRawContexts'
          },
          'ssRawInterrupts' => {
            'info' => 'UCD-SNMP-MIB::ssRawInterrupts.0 = Counter32: 1995002251',
            'oid' => 'ssRawInterrupts',
            'option' => 'counter,0:U',
            'title' => 'ssRawInterrupts'
          },
          'ssRawSwapIn' => {
            'info' => 'UCD-SNMP-MIB::ssRawSwapIn.0 = Counter32: 1580',
            'oid' => 'ssRawSwapIn',
            'option' => 'counter,0:U',
            'title' => 'ssRawSwapIn'
          },
          'ssRawSwapOut' => {
            'info' => 'UCD-SNMP-MIB::ssRawSwapOut.0 = Counter32: 10695',
            'oid' => 'ssRawSwapOut',
            'option' => 'counter,0:U',
            'title' => 'ssRawSwapOut'
          }
        },
        'threshold' => 'ssCpuRawUser,ssCpuRawSystem,ssCpuRawWait,ssCpuRawIdle'
      },
      'tcp' => {
        'graphtype' => 'tcp-conn,tcp-segs',
        'snmp' => {
          'tcpActiveOpens' => {
            'oid' => 'tcpActiveOpens',
            'option' => 'counter,0:U'
          },
          'tcpAttemptFails' => {
            'oid' => 'tcpAttemptFails',
            'option' => 'counter,0:U'
          },
          'tcpCurrEstab' => {
            'oid' => 'tcpCurrEstab',
            'option' => 'gauge,0:U'
          },
          'tcpEstabResets' => {
            'oid' => 'tcpEstabResets',
            'option' => 'counter,0:U'
          },
          'tcpInErrs' => {
            'oid' => 'tcpInErrs',
            'option' => 'counter,0:U'
          },
          'tcpInSegs' => {
            'oid' => 'tcpInSegs',
            'option' => 'counter,0:U'
          },
          'tcpOutRsts' => {
            'oid' => 'tcpOutRsts',
            'option' => 'counter,0:U'
          },
          'tcpOutSegs' => {
            'oid' => 'tcpOutSegs',
            'option' => 'counter,0:U'
          },
          'tcpPassiveOpens' => {
            'oid' => 'tcpPassiveOpens',
            'option' => 'counter,0:U'
          },
          'tcpRetransSegs' => {
            'oid' => 'tcpRetransSegs',
            'option' => 'counter,0:U'
          }
        }
      }
    },
    'sys' => {
      'alerts' => {
        'snmp' => {
          'hrSystemProcesses' => {
            'alert' => {
              'event' => 'High Number of System Processes',
              'level' => 'Warning',
              'test' => '$r > 200',
              'unit' => 'processes'
            },
            'oid' => 'hrSystemProcesses',
            'title' => 'System Processes'
          },
          'tcpCurrEstab' => {
            'alert' => {
              'event' => 'High TCP Connection Count',
              'level' => 'Warning',
              'test' => '$r > 100',
              'unit' => 'connections'
            },
            'oid' => 'tcpCurrEstab',
            'title' => 'TCP Established Sessions'
          }
        }
      },
      'laLoad' => {
        'snmp' => {
          'laLoad1' => {
            'oid' => 'laLoad.1'
          },
          'laLoad5' => {
            'oid' => 'laLoad.2'
          }
        }
      },
      'standard' => {
        'snmp' => {
          'ifNumber' => {
            'oid' => 'ifNumber',
            'title' => 'Interfaces'
          },
          'sysContact' => {
            'oid' => 'sysContact',
            'replace' => {
              '' => 'default'
            },
            'title' => 'Contact'
          },
          'sysDescr' => {
            'oid' => 'sysDescr',
            'title' => 'Description'
          },
          'sysLocation' => {
            'oid' => 'sysLocation',
            'replace' => {
              '' => 'default'
            },
            'title' => 'Location'
          },
          'sysName' => {
            'oid' => 'sysName'
          },
          'sysObjectID' => {
            'oid' => 'sysObjectID'
          },
          # SRC IMPORTANT - sysUptime is the number of clock ticks that snapped
          #              has been running for, not the uptime of the box.  hrSystemUpTime
          #              is the same as 'uptime' on the bash command line.
          'sysUpTime' => {
            'oid' => 'hrSystemUptime',
            'title' => 'Uptime',
          },
          'snmpUpTime' => {
            'oid' => 'sysUpTime',
            'title' => 'SNMP_Uptime',
					},
					
					'hrSystemDateSec' => {
						'oid' => 'hrSystemDate',
						# have: the 0xhexstring equivalent of local 2016-9-9,5:53:28.0,+10:0
						# we want fractional seconds in gmt.
						'calculate' => 'return func::parse_dateandtime($r);',
					},

					'clockDelta' => {
						'oid' => 'hrSystemDate',
						'calculate' => 'my $delta = Time::HiRes::time - func::parse_dateandtime($r); return ($delta > 0)? $delta: -$delta;',
					},
        }
      }
    }
  },
  'alerts' => {
    #'services' => {
    #  'HighProcessMemoryUsage' => {
    #    'element' => 'hrSWRunName',
    #    'event' => 'High Process Memory Usage',
    #    'level' => 'Warning',
    #    'test' => 'CVAR1=hrSWRunPerfMem;$CVAR1 > 300000',
    #    'type' => 'test',
    #    'unit' => 'KBytes',
    #    'value' => 'CVAR1=hrSWRunPerfMem;int($CVAR1)'
    #  }
    #},
    'storage' => {
      'HighDiskUsage' => {
        'control' => 'CVAR=hrStorageType;$CVAR =~ /Fixed Disk/',
        'element' => 'hrStorageDescr',
        'event' => 'High Disk Usage',
        'level' => '',
        'test' => '',
        'threshold' => {
          'Critical' => '98',
          'Fatal' => '99',
          'Major' => '95',
          'Minor' => '40',
          'Warning' => '21',
          'Normal' => '20',
        },
        'type' => 'threshold-rising',
        'unit' => '%',
        'value' => 'CVAR1=hrStorageSize;CVAR2=hrStorageUsed;$CVAR2 / $CVAR1 * 100'
      },
      'HighMemoryUsage' => {
        'comment' => 'fixme: ideally this should calculate
phys mem used mem minus cache and buffers
at least on linux 100% used is common with lots of buffers/cache',
        'type' => 'threshold-rising',
        'threshold' => {
          'Normal' => '99.3',
          'Warning' => '0',
          'Minor' => '0',
          'Major' => '99.4',
          'Critical' => '99.6',
          'Fatal' => '100',
        },
        'test' => '',
        'value' => 'CVAR1=hrStorageSize;CVAR2=hrStorageUsed;$CVAR2 / $CVAR1 * 100',
        'element' => 'hrStorageDescr',
        'unit' => '%',
        'event' => 'High Memory Usage',
        'level' => '',
        'control' => 'CVAR=hrStorageType;$CVAR =~ /^(Virtual )?Memory/',
      },
			'HighSwapUsage' => {
        'type' => 'threshold-rising',
        'threshold' => {
          'Normal' => '11',
          'Warning' => '15',
          'Minor' => '20',
          'Major' => '30',
          'Critical' => '50',
          'Fatal' => '75',
        },
        'test' => '',
        'value' => 'CVAR1=hrStorageSize;CVAR2=hrStorageUsed;$CVAR2 / $CVAR1 * 100',
        'element' => 'hrStorageDescr',
        'unit' => '%',
        'event' => 'High Swap Usage',
        'level' => '',
        'control' => 'CVAR=hrStorageType;$CVAR =~ /Swap/',
			},
    }
  },
  'systemHealth' => {
    'sections' => 'diskIOTable,addressTable,software',
    'sys' => {
      'software' => {
        'headers' => 'hrSWInstalledIndex,hrSWInstalledName,hrSWInstalledID,hrSWInstalledType,hrSWInstalledDate',
        #'index_regex' => '\\.(\\d+\.\\d+\\.\\d+\\.\\d+\\.\\d+)$',
        'indexed' => 'hrSWInstalledIndex',
        'snmp' => {
          'hrSWInstalledIndex' => {
            'oid' => 'hrSWInstalledIndex',
            'title' => 'hrSWInstalledIndex'
          },
          'hrSWInstalledName' => {
            'oid' => 'hrSWInstalledName',
            'title' => 'hrSWInstalledName'
          },
          'hrSWInstalledID' => {
            'oid' => 'hrSWInstalledID',
            'title' => 'hrSWInstalledID'
          },
          'hrSWInstalledType' => {
            'oid' => 'hrSWInstalledType',
            'title' => 'hrSWInstalledType'
          },
          'hrSWInstalledDate' => {
            'oid' => 'hrSWInstalledDate',
            'title' => 'hrSWInstalledDate'
          },
        }
      },

      'addressTable' => {
        'headers' => 'ipNetToMediaIfIndex,ipNetToMediaPhysAddress,ipNetToMediaNetAddress,ipNetToMediaType',
        'index_regex' => '\\.(\\d+\.\\d+\\.\\d+\\.\\d+\\.\\d+)$',
        'indexed' => 'ipNetToMediaIfIndex',
        'snmp' => {
          'ipNetToMediaIfIndex' => {
            'oid' => 'ipNetToMediaIfIndex',
            'title' => 'ipNetToMediaIfIndex'
          },
          'ipNetToMediaPhysAddress' => {
            'oid' => 'ipNetToMediaPhysAddress',
            'title' => 'ipNetToMediaPhysAddress'
          },
          'ipNetToMediaNetAddress' => {
            'oid' => 'ipNetToMediaNetAddress',
            'title' => 'ipNetToMediaNetAddress'
          },
          'ipNetToMediaType' => {
            'oid' => 'ipNetToMediaType',
            'title' => 'ipNetToMediaType'
          },
        }
      },
      'diskIOTable' => {
        'headers' => 'diskIODevice',
        'index_oid' => '1.3.6.1.4.1.2021.13.15.1.1.1',
        'indexed' => 'diskIOIndex',
        'snmp' => {
          'diskIODevice' => {
            'oid' => 'diskIODevice',
            'title' => 'IO Device Name'
          },
          'diskIOIndex' => {
            'oid' => 'diskIOIndex',
            'title' => 'IO Device Index'
          },
        }
      }
    },
    'rrd' => {
      'diskIOTable' => {
        'control' => 'CVAR=diskIODevice;$CVAR =~ /^(sd|sr|disk|xvd|dm-)/',
        'graphtype' => 'diskio-rw,diskio-rwbytes',
        'indexed' => 'true',
        'snmp' => {
          'diskIONReadX' => {
            'oid' => 'diskIONReadX',
            'option' => 'counter,0:U',
            'title' => 'The number of bytes read from this device since boot'
          },
          'diskIONWrittenX' => {
            'oid' => 'diskIONWrittenX',
            'option' => 'counter,0:U',
            'title' => 'The number of bytes written from this device since boot'
          },
          'diskIOReads' => {
            'oid' => 'diskIOReads',
            'option' => 'counter,0:U',
            'title' => 'The number of read accesses from this device since boot'
          },
          'diskIOWrites' => {
            'oid' => 'diskIOWrites',
            'option' => 'counter,0:U',
            'title' => 'The number of write accesses to this device since boot'
          }
        }
      }
    },
  },
  'device' => {
    'sys' => {
      'cpu' => {
        'snmp' => {
          'hrCpuLoad' => {
            'oid' => 'laLoad.2'
          }
        }
      },
      'device' => {
        'indexed' => 'true',
        'snmp' => {
          'hrDeviceDescr' => {
            'oid' => 'hrDeviceDescr'
          },
          'hrDeviceType' => {
            'oid' => 'hrDeviceType'
          }
        }
      }
    }
  },
  'interface' => {
    'sys' => {
      'standard' => {
        'indexed' => 'true',
        'snmp' => {
          'Description' => {
            'oid' => 'ifAlias',
            'title' => 'Description'
          },
          'Hardware' => {
            'oid' => 'ifDescr',
            'title' => 'Hardware',
          },

          'ifAdminStatus' => {
            'oid' => 'ifAdminStatus',
            'replace' => {
              '1' => 'up',
              '2' => 'down',
              '3' => 'testing',
              '4' => 'unknown',
              '5' => 'dormant',
              '6' => 'notPresent',
              '7' => 'lowerLayerDown'
            },
            'title' => 'Admin Status'
          },
          'ifDescr' => {
            'oid' => 'ifName',
            'title' => 'Name',
						'calculate' => 'CVAR1=ifDescr; CVAR2=Hardware; $r = ("$CVAR1" eq "noSuchObject"? "$CVAR2": "$CVAR1"); ',
          },
          'ifPhysAddress' => {
            'oid' => 'ifPhysAddress',
            'title' => 'Physical Address'
          },
          'ifLastChange' => {
            'oid' => 'ifLastChange',
            'title' => 'Last Change'
          },
          'ifOperStatus' => {
            'oid' => 'ifOperStatus',
            'replace' => {
              '1' => 'up',
              '2' => 'down',
              '3' => 'testing',
              '4' => 'unknown',
              '5' => 'dormant',
              '6' => 'notPresent',
              '7' => 'lowerLayerDown'
            },
            'title' => 'Oper Status'
          },
          'ifSpeed' => {
            'oid' => 'ifSpeed',
            'title' => 'Bandwidth'
          },
          'ifType' => {
            'oid' => 'ifType',
            'title' => 'Type'
          }
        }
      }
    },
    'rrd' => {
      'interface' => {
        'graphtype' => 'bits,abits,maxbits,util,autil',
        'indexed' => 'true',
        'snmp' => {
          'ifAdminStatus' => {
            'oid' => 'ifAdminStatus',
            'replace' => {
              '1' => 'up',
              '2' => 'down',
              '3' => 'testing',
              '4' => 'unknown',
              '5' => 'dormant',
              '6' => 'notPresent',
              '7' => 'lowerLayerDown'
            }
          },
          'ifDescr' => {
            'oid' => 'ifName',
						'calculate' => 'CVAR1=ifDescr; CVAR2=Hardware; $r = ("$CVAR1" eq "noSuchObject"? "$CVAR2": "$CVAR1"); ',
					},
					
					# don't want this in this section, but needed or the ifname/ifdescr fallback fails
					'Hardware' => {
            'oid' => 'ifDescr',
          },

          'ifInOctets' => {
            'oid' => 'ifInOctets',
            'option' => 'counter,0:U'
          },
          'ifOperStatus' => {
            'oid' => 'ifOperStatus',
            'option' => 'gauge,0:100',
            'replace' => {
              '1' => 'up',
              '2' => 'down',
              '3' => 'testing',
              '4' => 'unknown',
              '5' => 'dormant',
              '6' => 'notPresent',
              '7' => 'lowerLayerDown'
            }
          },
          'ifOutOctets' => {
            'oid' => 'ifOutOctets',
            'option' => 'counter,0:U'
          }
        },
        'threshold' => 'util_in,util_out'
      },
      'pkts_hc' => {
        'graphtype' => 'pkts_hc,errpkts_hc',
        'indexed' => 'true',
        'snmp' => {
          'ifHCInBcastPkts' => {
            'oid' => 'ifHCInBroadcastPkts',
            'option' => 'counter,0:U'
          },
          'ifHCInMcastPkts' => {
            'oid' => 'ifHCInMulticastPkts',
            'option' => 'counter,0:U'
          },
          'ifHCInOctets' => {
            'oid' => 'ifHCInOctets',
            'option' => 'counter,0:U'
          },
          'ifHCInUcastPkts' => {
            'oid' => 'ifHCInUcastPkts',
            'option' => 'counter,0:U'
          },
          'ifHCOutBcastPkts' => {
            'oid' => 'ifHCOutBroadcastPkts',
            'option' => 'counter,0:U'
          },
          'ifHCOutMcastPkts' => {
            'oid' => 'ifHCOutMulticastPkts',
            'option' => 'counter,0:U'
          },
          'ifHCOutOctets' => {
            'oid' => 'ifHCOutOctets',
            'option' => 'counter,0:U'
          },
          'ifHCOutUcastPkts' => {
            'oid' => 'ifHCOutUcastPkts',
            'option' => 'counter,0:U'
          },
          'ifInBcastPkts' => {
            'oid' => 'ifInBroadcastPkts',
            'option' => 'counter,0:U'
          },
          'ifInDiscards' => {
            'oid' => 'ifInDiscards',
            'option' => 'counter,0:U'
          },
          'ifInErrors' => {
            'oid' => 'ifInErrors',
            'option' => 'counter,0:U'
          },
          'ifInMcastPkts' => {
            'oid' => 'ifInMulticastPkts',
            'option' => 'counter,0:U'
          },
          'ifInOctets' => {
            'oid' => 'ifInOctets',
            'option' => 'counter,0:U'
          },
          'ifInUcastPkts' => {
            'oid' => 'ifInUcastPkts',
            'option' => 'counter,0:U'
          },
          'ifOutBcastPkts' => {
            'oid' => 'ifOutBroadcastPkts',
            'option' => 'counter,0:U'
          },
          'ifOutDiscards' => {
            'oid' => 'ifOutDiscards',
            'option' => 'counter,0:U'
          },
          'ifOutErrors' => {
            'oid' => 'ifOutErrors',
            'option' => 'counter,0:U'
          },
          'ifOutMcastPkts' => {
            'oid' => 'ifOutMulticastPkts',
            'option' => 'counter,0:U'
          },
          'ifOutOctets' => {
            'oid' => 'ifOutOctets',
            'option' => 'counter,0:U'
          },
          'ifOutUcastPkts' => {
            'oid' => 'ifOutUcastPkts',
            'option' => 'counter,0:U'
          }
        },
        'threshold' => 'pkt_errors_in,pkt_errors_out'
      }
    },
    'nocollect' => {
      'Description' => '^#',
      'ifDescr' => 'sublayer|null',
      'ifOperStatus' => 'other',
      'ifType' => 'other|softwareloopback|isdn',
      'noDescription' => 'false'
    },
    'noevent' => {
      'Description' => '^!',
      'ifDescr' => 'null',
      'ifType' => 'other'
    },
  },
  'storage' => {
    'nocollect' => {
      'Description' => '/mnt/cdrom|boot'
    },
    'sys' => {
      'storage' => {
        'indexed' => 'true',
        'snmp' => {
          'hrStorageDescr' => {
            'oid' => 'hrStorageDescr'
          },
          'hrStorageSize' => {
            'oid' => 'hrStorageSize'
          },
          'hrStorageType' => {
            'oid' => 'hrStorageType'
          },
          'hrStorageUnits' => {
            'oid' => 'hrStorageAllocationUnits'
          },
          'hrStorageUsed' => {
            'oid' => 'hrStorageUsed'
          }
        }
      }
    }
  },
);
